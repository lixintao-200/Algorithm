
public class Test202111125 {
    public static void main(String[] args) {
        //System.out.println(search(new int[]{3, 4, 5, 6, 7, 8}, 8));
        //System.out.println(search_leftBound(new int[]{3, 8, 8, 8, 8, 12}, 8));
        //System.out.println(search_rightBound(new int[]{3, 5, 8, 9, 10, 12}, 5));
        //System.out.println(firstBadVersion(10));
        //System.out.println(8 >> 2);//右移几位 等价于除以2 的几次方
        //System.out.println(2 << 2);//左移几位 等价于 乘以2的几次方

//        int[] ints = new int[]{3, 1, 5, 6, 2};
//        swap(ints);
//        for (int i = 0; i < ints.length; i++) {
//            System.out.println(ints[i]);
//        }
        System.out.println(searchInsert(new int[]{2, 4, 6, 8}, 4));

    }

    //给定一个n个元素有序的（升序）整型数组nums 和一个目标值target ，写一个函数搜索nums中的 target，
    // 如果目标值存在返回下标，否则返回 -1。
    public static int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return -1;

    }

    //二分查找最有边界
    public static int search_leftBound(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] == target) {
                right = mid - 1;
            }
        }
        if (left >= nums.length || nums[left] != target) {
            return -1;
        }
        return left;
    }

    //二分查找最右边界
    public static int search_rightBound(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        if (right < 0 || nums[right] != target) {
            return -1;
        }
        return right;
    }

    //获取第一个出现的错误版本 假设错误版本为8,n=10
    //如果一个版本为正确版本，那么错误版本一定在其左侧,否则错误版本一定在其右侧
    public static int firstBadVersion(int n) {
        int left = 0, right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (isBad(mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    public static boolean isBad(int i) {
        if (i == 5) {
            return true;
        }
        return false;
    }


    //给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
    //请必须使用时间复杂度为 O(log n) 的算法。(二分查找算法)
    public static int searchInsert(int[] nums, int target) {
        int left = 0, right = nums.length - 1, ans = nums.length;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] >= target) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;

    }

    //冒泡排序
    public static void swap(int[] ints) {
        for (int i = 0; i < ints.length; i++) {
            for (int j = 0; j < ints.length - i - 1; j++) {
                if (ints[j] < ints[j + 1]) {
                    int temp = ints[j + 1];
                    ints[j + 1] = ints[j];
                    ints[j] = temp;
                }
            }
        }
    }

}



